#include "mcc_generated_files/mcc.h"
#include <stdio.h>
#include <stdlib.h>
#include "mcc_generated_files/examples/i2c_master_example.h"
#include "font6.h"
#include "font12.h"

#define OLED_addr 0x3C
#define RTC_addr 0x32

#define SECOND 0x00
#define MINUTE 0x10
#define HOUR 0x20
#define DAY 0x30//WEEK
#define DATE 0x40
#define MONTH 0x50
#define YEAR 0x60
#define ALM_D_M 0xB0
#define ALM_D_H 0xC0
#define CTL1 0xE0
#define CTL2 0xF0

uint8_t Page;
uint8_t Column;
uint8_t Low_col;
uint8_t Hi_col;
uint8_t Size;
//int     num;
div_t   res;

typedef struct {
    int quot;  /* 商 */
    int rem;   /* 剰余 */
} div_t;

//??????A?D???Flag
bool AA=false;
bool BB=false;
bool CC=false;
bool DD=false;
bool set_flg;

uint8_t CLR_cmd[] ={0x00,0x20,0x00,0x21,0x00,0x7F,0x22,0x00,0x07};
//????????,Horizontal addredding Mode,column start address,
//column end address,page start address,page end address
uint8_t Posi_cmd[] = {0x00,0x20,0x02,0xB0,0x00,0x00};
//????????,Page addressing Mode,Page(B0-B7),low column,high column)
uint8_t Font6_data[] = {0x40,0x00,0x00,0x00,0x00,0x00,0x00};
//???????,font6???6?
uint8_t Font12_data[] = {0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
//???????,font12???12?

uint16_t result; 
uint16_t Duty;
uint16_t Duty_cmp;
uint16_t Duty2;
uint16_t Duty2_cmp;
uint8_t Duty_add;
int swipe_count;
int wait;
int tadj;
int kind;
int count;
//int settei[8][3]; //[7]:? [6]:? [5]:? [4]:? [3]:? [2]:? ? [0]:data,[1]:min,[2]]:max
int16_t Message;

char str[256];
char str2[256];
bool tm_adj;

uint8_t settei[8][3] = {{0,0,10},{0,0,59},{30,0,59},{18,0,23},{4,0,6},{17,1,31}\
,{10,1,12},{24,20,99}};
char unit[][10]={"DMY1","DMY2","MINUTES","HOUR","WEEK","DAY","MONTH","YEAR"};
char *week[] = {"SUN","MON","TUE","WED","THU","FRI","SAT"};
//????????
uint8_t REG[8] = {0x00,0x30,0x59,0x18,0x04,0x17,0x10,0x24};
uint8_t REG_addr = 0x00;


//??????????
void Time_data_write(){
//I2C_Write1ByteRegister(RTC_addr,0x00,0x00);//??????
I2C_Write1ByteRegister(RTC_addr,SECOND,REG[1]);
I2C_Write1ByteRegister(RTC_addr,MINUTE,REG[2]);
I2C_Write1ByteRegister(RTC_addr,HOUR,REG[3]);
I2C_Write1ByteRegister(RTC_addr,DAY,REG[4]);
I2C_Write1ByteRegister(RTC_addr,DATE,REG[5]);
I2C_Write1ByteRegister(RTC_addr,MONTH,REG[6]);
I2C_Write1ByteRegister(RTC_addr,YEAR,REG[7]);
//I2C_Write1ByteRegister(RTC_addr,CTRL,REG[7]);
}

//RTC?????????????REG[]???
void Time_data_read(){
//I2C_WriteNBytes(RTC_addr,&REG_addr,1);
I2C_WriteNBytes(RTC_addr,0x00,1);
I2C_ReadNBytes(RTC_addr,&REG,7);
}

//RTC?????????????REG[]???
void Alarm_set(){
I2C_Write1ByteRegister(RTC_addr,CTL1,0x20);
I2C_Write1ByteRegister(RTC_addr,ALM_D_M,0x00);
I2C_Write1ByteRegister(RTC_addr,ALM_D_H,0x19);
I2C_Write1ByteRegister(RTC_addr,CTL2,0x01);
I2C_Write1ByteRegister(RTC_addr,CTL1,0x60);
}

void Clock_set(){
    
    
    
    //設定値を現在時刻に反映
    for(int i = 0; i < 8; i++) {
        res = div(settei[i][0],10);
        REG[i]=res.quot*16+res.rem;    
    }
    Time_data_write();
//        I2C_Write1ByteRegister(RTC_addr,YEAR-16*(7-i),REG[i]);
}

void Pen_swipe(int set_duty){
    PWM11_DutyCycleSet(set_duty);
    PWM11_LoadBufferSet();
    __delay_ms(15);    
}
void Pen_swipe2(int set_duty){
    PWM6_DutyCycleSet(set_duty);
    PWM6_LoadBufferSet();
    __delay_ms(15);    
}

//????1byte??
void OLED_cmd(uint8_t cmd){
I2C_Write1ByteRegister(OLED_addr,0x80,cmd);
}

//???1byte??
void OLED_data(uint8_t dat){
I2C_Write1ByteRegister(OLED_addr,0xC0,dat);
}

//OLED???
void OLED_init(){
OLED_cmd(0x8D); //Set charge pump
OLED_cmd(0x14); //Enable charge pump
OLED_cmd(0xAF); //Display ON
}

//OLED????
void OLED_clr(){
I2C_WriteNBytes(OLED_addr, CLR_cmd, 9);//Horizontal addressing mode
for(unsigned int i = 0;i < 1024 ;i++ ){ //0s00?1024???
OLED_data(0x00);
}
}


// 6x8dot?????????????
void font6_posi(uint8_t page, uint8_t column){
Size = 0; //printf ?????putch ???????????
Page = page; // ????????font12??????????????????
Column = column; // ??????font12??????????????????
Posi_cmd[3] = 0xB0 + page; // ?????????????????? 0xB0 ???
Posi_cmd[4] = column & 0x0F; //low_column
column = column >>4;
Posi_cmd[5] = column + 0x10; //hi_column
I2C_WriteNBytes(OLED_addr, Posi_cmd, 6); //Position ?????I2C???
}

// 12x16dot?????????????
void font12_posi(uint8_t page,uint8_t column){
Size = 1; // printf ?????putch ???????????
Page = page; // ????????font12??????????????????
Column = column;// ??????font12??????????????????
Posi_cmd[3] = page + 0xB0; // ?????????????????? 0xB0 ???
Posi_cmd[4] = column & 0x0F; //low_column
column = column >>4;
Posi_cmd[5] = column + 0x10; //hi_column
I2C_WriteNBytes(OLED_addr, Posi_cmd, 6);
}

// 6x8dot?????1??????
void chr6(uint8_t c){
c = c - 0x20;
for(uint8_t i = 0; i<6; i++){
Font6_data[i+1] = font6[c][i];
}
I2C_WriteNBytes(OLED_addr,Font6_data,7);
}

// 12x16dot?????1??????
void chr12(uint8_t c){
uint8_t temp;
uint8_t i;
c = c + 6 - 0x30;
Page = Page + 0xB0;
Low_col = Column & 0x0F;
temp = Column >> 4;
Hi_col = temp + 0x10;
Posi_cmd[3] = Page;
Posi_cmd[4] = Low_col;
Posi_cmd[5] = Hi_col;
I2C_WriteNBytes(OLED_addr,Posi_cmd,6);
for(i = 0; i<12; i++){
Font12_data[i+1] = font12[c][i];
}
I2C_WriteNBytes(OLED_addr,Font12_data,13);

Page = Page + 1;
Posi_cmd[3] = Page;
I2C_WriteNBytes(OLED_addr,Posi_cmd,6);
for(i = 12; i<24; i++){
Font12_data[i-11] = font12[c][i];
}
I2C_WriteNBytes(OLED_addr,Font12_data,13);
Page = Page - 1 - 0xB0;
Column = Column +12;
}

//printf?????putch???
void putch(uint8_t c){
if(Size){
chr12(c);
}else{
chr6(c);
}
}


//Time??????
void Time_disp(){
//OLED_clr();
font6_posi(2, 0);
printf("%02x:",REG[3]);//?
printf("%02x:",REG[2]);//?
printf("%02x",REG[1]);//?
}

void RTC_disp(){
font6_posi(1, 0);
printf("20");
printf("%x/",REG[7]);//?
printf("%x/",REG[6]);//?
printf("%x ",REG[5]);//?
printf("(%s)",week[REG[4]]);//??
font6_posi(2, 0);
printf("%02x:",REG[3]);//?
printf("%02x:",REG[2]);//?
printf("%02x",REG[1]);//?
}


void Time_Adj(int num){
    
    switch(num) {
    case 1:
        //????????????
        if(kind<7){
            kind=kind+1;
        }
        else{
            kind=7;
        }
        break;
    case 2:
        //?????????????
        if(kind>2){
            kind=kind-1;
        }
        else{
            kind=2;
        }
        break;
    case 3://+1(増)        
        if (settei[kind][0] < settei[kind][2]){
            settei[kind][0]=settei[kind][0] +1;
        }
//        else{
//            settei[kind][0]=settei[kind][2];            
//        }
        break;
    case 4://-1(減)
        if (settei[kind][0] > settei[kind][1]){
            settei[kind][0]=settei[kind][0] -1;
        }
//        else{
//            settei[kind][0] = settei[kind][1];
//        }
        break;       
    }    
}

      
void  TMR2_Process(void){
    
    //通常モード
    if(tm_adj==false){
        if(AA==true & BB==false & CC==false & DD==false){
            Pen_swipe(1500);            
        }
        if(AA==false & BB==true & CC==false & DD==false){
            Pen_swipe(3100);
        }
        if(AA==false & BB==false & CC==true & DD==false){
            Pen_swipe2(1500);
        }
        if(AA==true & BB==false & CC==false & DD==false){
            Pen_swipe2(1500);
        }
        if(AA==true & BB==true & CC==false & DD==false){
            tm_adj=true;
        }
    }
    //時間調整モード
    else{
        if(AA==true & BB==false & CC==false & DD==false){            
            Time_Adj(1);
        }
        if(AA==false & BB==true & CC==false & DD==false){
            Time_Adj(2);
        }
        if(AA==false & BB==false & CC==true & DD==false){
            Time_Adj(3);
         }        
        if(AA==false & BB==false & CC==false & DD==true){
            Time_Adj(4);
        }
        if(AA==false & BB==false & CC==true & DD==true){
            tm_adj=false;
            set_flg=true;
        }
    }
    count++;

}

void main(void)
{    
    SYSTEM_Initialize();    
    TMR2_SetInterruptHandler(TMR2_Process);
    INTERRUPT_GlobalInterruptEnable();    
    INTERRUPT_PeripheralInterruptEnable();    

    OLED_init();
    OLED_clr();

//    font6_posi(1, 0);
//    printf("Start");
    
    Time_data_write();
    Time_data_read();
    OLED_clr();
    RTC_disp();
//    Alarm_set();
    tm_adj=false;
    set_flg=false;    
    count=0;
    kind=2;
            
    while (1)
    {        
        
        AA=false;
        BB=false;
        CC=false;
        DD=false;

        Time_data_read();
        RTC_disp();        
        
        font6_posi(5, 0);
        printf("                                                             ");
        //ボタンの状態確認
        if(TURN_OFF_GetValue()==0){
            AA=true;
            font6_posi(5, 0);
            printf("AA");
        }    
        if(TURN_ON_GetValue()==0){
            BB=true;
            font6_posi(5, 15);
            printf("BB");
        }
        if(UP_GetValue()==0){
            CC=true;
            font6_posi(5, 30);
            printf("CC");
        }
        if(DOWN_GetValue()==0){
            DD=true;
            font6_posi(5, 45);
            printf("DD");
        }

        
        
        font6_posi(6, 0);
        printf("%d: %s :%d               ",kind,unit[kind],settei[kind][0]);//設定中の項目と値を表示
        
        font6_posi(3, 0);
        if(tm_adj==true){            
            printf("SETTING MODE ");
        }
        else{
            printf("                    ");
            if(set_flg==true){
                Clock_set();
                set_flg=false;
            }
        }
        
//        font6_posi(4, 0);
//        printf("%d:",count);
                

    }
}


