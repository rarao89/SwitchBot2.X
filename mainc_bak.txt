#include "mcc_generated_files/mcc.h"
#include <stdio.h>
#include "mcc_generated_files/examples/i2c_master_example.h"
#include "font6.h"
#include "font12.h"

#define OLED_addr 0x3C
#define RTC_addr 0x32

#define SECOND 0x00
#define MINUTE 0x10
#define HOUR 0x20
#define DAY 0x30//WEEK
#define DATE 0x40
#define MONTH 0x50
#define YEAR 0x60
#define ALM_D_M 0xB0
#define ALM_D_H 0xC0
#define CTL1 0xE0
#define CTL2 0xF0

uint8_t Page;
uint8_t Column;
uint8_t Low_col;
uint8_t Hi_col;
uint8_t Size;

uint8_t CLR_cmd[] ={0x00,0x20,0x00,0x21,0x00,0x7F,0x22,0x00,0x07};
//????????,Horizontal addredding Mode,column start address,
//column end address,page start address,page end address
uint8_t Posi_cmd[] = {0x00,0x20,0x02,0xB0,0x00,0x00};
//????????,Page addressing Mode,Page(B0-B7),low column,high column)
uint8_t Font6_data[] = {0x40,0x00,0x00,0x00,0x00,0x00,0x00};
//???????,font6???6?
uint8_t Font12_data[] = {0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
//???????,font12???12?

uint16_t result; 
uint16_t Duty;
uint16_t Duty_cmp;
uint16_t Duty2;
uint16_t Duty2_cmp;
uint8_t Duty_add;
int swipe_count;
int wait;
int tadj;
uint16_t Message;
char str[256];
char str2[256];
bool time_adj;


char *week[] = {" ","MON","TUE","WED","THU","FRI","SAT","SUN"};
//????????
uint8_t REG[8] = {0x00,0x50,0x59,0x18,0x07,0x29,0x09,0x24};
uint8_t REG_addr = 0x00;


//??????????
void Time_data_write(){
//I2C_Write1ByteRegister(RTC_addr,0x00,0x00);//??????
I2C_Write1ByteRegister(RTC_addr,SECOND,REG[1]);
I2C_Write1ByteRegister(RTC_addr,MINUTE,REG[2]);
I2C_Write1ByteRegister(RTC_addr,HOUR,REG[3]);
I2C_Write1ByteRegister(RTC_addr,DAY,REG[4]);
I2C_Write1ByteRegister(RTC_addr,DATE,REG[5]);
I2C_Write1ByteRegister(RTC_addr,MONTH,REG[6]);
I2C_Write1ByteRegister(RTC_addr,YEAR,REG[7]);
//I2C_Write1ByteRegister(RTC_addr,CTRL,REG[7]);
}

//RTC?????????????REG[]???
void Time_data_read(){
//I2C_WriteNBytes(RTC_addr,&REG_addr,1);
I2C_WriteNBytes(RTC_addr,0x00,1);
I2C_ReadNBytes(RTC_addr,&REG,7);
}

//RTC?????????????REG[]???
void Alarm_set(){
I2C_Write1ByteRegister(RTC_addr,CTL1,0x20);
I2C_Write1ByteRegister(RTC_addr,ALM_D_M,0x00);
I2C_Write1ByteRegister(RTC_addr,ALM_D_H,0x19);
I2C_Write1ByteRegister(RTC_addr,CTL2,0x01);
I2C_Write1ByteRegister(RTC_addr,CTL1,0x60);
}



void Pen_swipe(int set_duty){
    PWM11_DutyCycleSet(set_duty);
    PWM11_LoadBufferSet();
    __delay_ms(15);    
}
void Pen_swipe2(int set_duty){
    PWM6_DutyCycleSet(set_duty);
    PWM6_LoadBufferSet();
    __delay_ms(15);    
}

//????1byte??
void OLED_cmd(uint8_t cmd){
I2C_Write1ByteRegister(OLED_addr,0x80,cmd);
}

//???1byte??
void OLED_data(uint8_t dat){
I2C_Write1ByteRegister(OLED_addr,0xC0,dat);
}

//OLED???
void OLED_init(){
OLED_cmd(0x8D); //Set charge pump
OLED_cmd(0x14); //Enable charge pump
OLED_cmd(0xAF); //Display ON
}

//OLED????
void OLED_clr(){
I2C_WriteNBytes(OLED_addr, CLR_cmd, 9);//Horizontal addressing mode
for(unsigned int i = 0;i < 1024 ;i++ ){ //0s00?1024???
OLED_data(0x00);
}
}


// 6x8dot?????????????
void font6_posi(uint8_t page, uint8_t column){
Size = 0; //printf ?????putch ???????????
Page = page; // ????????font12??????????????????
Column = column; // ??????font12??????????????????
Posi_cmd[3] = 0xB0 + page; // ?????????????????? 0xB0 ???
Posi_cmd[4] = column & 0x0F; //low_column
column = column >>4;
Posi_cmd[5] = column + 0x10; //hi_column
I2C_WriteNBytes(OLED_addr, Posi_cmd, 6); //Position ?????I2C???
}

// 12x16dot?????????????
void font12_posi(uint8_t page,uint8_t column){
Size = 1; // printf ?????putch ???????????
Page = page; // ????????font12??????????????????
Column = column;// ??????font12??????????????????
Posi_cmd[3] = page + 0xB0; // ?????????????????? 0xB0 ???
Posi_cmd[4] = column & 0x0F; //low_column
column = column >>4;
Posi_cmd[5] = column + 0x10; //hi_column
I2C_WriteNBytes(OLED_addr, Posi_cmd, 6);
}

// 6x8dot?????1??????
void chr6(uint8_t c){
c = c - 0x20;
for(uint8_t i = 0; i<6; i++){
Font6_data[i+1] = font6[c][i];
}
I2C_WriteNBytes(OLED_addr,Font6_data,7);
}

// 12x16dot?????1??????
void chr12(uint8_t c){
uint8_t temp;
uint8_t i;
c = c + 6 - 0x30;
Page = Page + 0xB0;
Low_col = Column & 0x0F;
temp = Column >> 4;
Hi_col = temp + 0x10;
Posi_cmd[3] = Page;
Posi_cmd[4] = Low_col;
Posi_cmd[5] = Hi_col;
I2C_WriteNBytes(OLED_addr,Posi_cmd,6);
for(i = 0; i<12; i++){
Font12_data[i+1] = font12[c][i];
}
I2C_WriteNBytes(OLED_addr,Font12_data,13);

Page = Page + 1;
Posi_cmd[3] = Page;
I2C_WriteNBytes(OLED_addr,Posi_cmd,6);
for(i = 12; i<24; i++){
Font12_data[i-11] = font12[c][i];
}
I2C_WriteNBytes(OLED_addr,Font12_data,13);
Page = Page - 1 - 0xB0;//???????????????? Page ???1?????????????????????? (0xB0???????????????????
Column = Column +12;// ???????????????????1???????12????????
}

//printf?????putch???
void putch(uint8_t c){
if(Size){
chr12(c);
}else{
chr6(c);
}
}


//Time??????
void Time_disp(){
//OLED_clr();
font6_posi(2, 0);
printf("%02x:",REG[3]);//?
printf("%02x:",REG[2]);//?
printf("%02x",REG[1]);//?
}

void RTC_disp(){
font6_posi(1, 0);
printf("20");
printf("%x/",REG[7]);//?
printf("%x/",REG[6]);//?
printf("%x (",REG[5]);//?
printf(week[REG[4]]);//??
printf(")");
font6_posi(2, 0);
printf("%02x:",REG[3]);//?
printf("%02x:",REG[2]);//?
printf("%02x",REG[1]);//?
}


void Time_Adj(){
    
    while(UP_GetValue()==0 & DOWN_GetValue()==0){}
    while(TURN_ON_GetValue()==0 & TURN_OFF_GetValue()==0){}
    tadj=7;
    while(DOWN_GetValue()==1 & TURN_OFF_GetValue()==1){
        if(UP_GetValue()==1){
            tadj=tadj+1;
            if(tadj>7){
                tadj=7;
            } 
        }
        if(DOWN_GetValue()==1){
            tadj=tadj-1;
            if(tadj<1){
                tadj=1;
            } 
        }
        font6_posi(6, 0);
        printf("tadj= ");
        printf("%d",tadj);
    }
    
}

      
void  TMR2_Process(void){
    
    
    if(UP_GetValue()==0){
        Duty=3100;
//        if(Duty<4400){
//            Duty=Duty+100;
//        }
    }       
    if(DOWN_GetValue()==0){
        Duty=2500;
        //        if(Duty>1600){
//            Duty=Duty-100;
//        }        
    }     
    
    if(TURN_ON_GetValue()==0){
        if(Duty2<4400){
            Duty2=Duty2+100;
        }
    }
    if(TURN_OFF_GetValue()==0){
        if(Duty2>1600){
            Duty2=Duty2-100;
        }
    }
    
void  TMR4_Process(void){


}
//    if(UP_GetValue()==1 & TURN_ON_GetValue()==1){
//         Time_Adj();
//    }
    
}

void main(void)
{    
    SYSTEM_Initialize();    
    TMR2_SetInterruptHandler(TMR2_Process);
    TMR4_SetInterruptHandler(TM42_Process);        
    INTERRUPT_GlobalInterruptEnable();    
    INTERRUPT_PeripheralInterruptEnable();    
   
    Duty=3000;
    Duty_cmp=0;
    Duty2=3000;
    Duty2_cmp=0;
  

    OLED_init();
    OLED_clr();

    font6_posi(1, 70);
    printf("12.34 [V]");
    font12_posi(3, 4);
    printf("50.2346MHz");
    font6_posi(6, 0);
    printf("ABCDEFGHIJklmnopqrstu");
    //__delay_ms(200);
    
    Time_data_write();
    Time_data_read();
    OLED_clr();
    RTC_disp();
    Alarm_set();
    time_adj=false;    
    
    while (1)
    {        
        if(Duty != Duty_cmp){
            sprintf(str, "%d", Duty);
            font6_posi(5, 70);
            printf(str);
            font6_posi(6, 70);
            printf(str2);
            Pen_swipe(Duty);
            Duty_cmp=Duty;
        }
        
        if(Duty2 != Duty2_cmp){
            sprintf(str2, "%d", Duty2);
            font6_posi(5, 70);
            printf(str);
            font6_posi(6, 70);
            printf(str2);
            Pen_swipe2(Duty2);
            Duty2_cmp=Duty2;
        }
     
        if (time_adj=false){
            Time_data_read();
            Time_disp(); 
        }
        
    }
   
    
////    Message=Duty;
////    printf("%d", Message);
//    
//    while (1)
//    {      
//        if(swipe_flag=true){
//            Pen_swipe(Duty);                     
//            swipe_flag=false;        
//        }
//        
//        OLED_clr();
//        Message=Duty;
//        font12_posi(3, 0);
//        printf("%d", Message);
//        __delay_ms(1);        
//    }
}
//        if (Duty>=1250 && Duty_add==10)
//        {
//            Duty_add=-10;            
//        }
//        
//        if(Duty<=250 && Duty_add==-10)
//        {
//            Duty_add=10;            
//        }
//        
//        Duty=Duty+Duty_add;
//        Pen_swipe(Duty);
//        __delay_ms(500);
//        
    
//        printf("\r\n swipe_count %d",swipe_count);
//        if (scf == true)
//        {
//            result=ADC_GetConversion(POT1); 
//            wait=0.09f*result+30;
//            if (swipe_count>=wait) 
//            {
//                Duty=2300;
//                Pen_swipe(Duty);
//                scf=false;
//                swipe_count=0;
//            }
//        }
//        else //scf==false
//        {
//            Duty=Duty-10;
//            Pen_swipe(Duty);
//            if(Duty<=1000)
//            {
//                scf=true;
//            }            
//        }            
        
        
//        result=ADC_GetConversion(POT1);        
//        SetDuty=0.1f*result+30;
////        printf("\r\n AN0/SetDuty %d,  %d",result,SetDuty);
//                
//        PWM11_DutyCycleSet(SetDuty);
//        PWM11_LoadBufferSet();
//        __delay_ms(2);
//        // Add your application code